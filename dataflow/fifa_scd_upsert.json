{
	"name": "fifa_scd_upsert",
	"properties": {
		"description": "add new records and update existing records",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "fifa_dl_csv",
						"type": "DatasetReference"
					},
					"name": "sourcefifacsv"
				},
				{
					"dataset": {
						"referenceName": "fifa_sqldb_tb",
						"type": "DatasetReference"
					},
					"name": "existingfifa"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "fifa_sqldb_tb",
						"type": "DatasetReference"
					},
					"name": "sinktosqldb"
				}
			],
			"transformations": [
				{
					"name": "callnewhashvalues"
				},
				{
					"name": "callexistinghashvalue"
				},
				{
					"name": "checknewdata"
				},
				{
					"name": "addsurrogatekey",
					"description": "Adding new key Skey starting from 1 with step 1"
				},
				{
					"name": "getmaxskey"
				},
				{
					"name": "joinmaxskey"
				},
				{
					"name": "addskeyandothercolumns"
				},
				{
					"name": "selectreleventcolumns"
				},
				{
					"name": "updateexistingdata"
				},
				{
					"name": "amendactivestatus"
				},
				{
					"name": "selectrelevantcolumns"
				},
				{
					"name": "insertset"
				},
				{
					"name": "updateset"
				},
				{
					"name": "unioninsertupdate"
				}
			],
			"scriptLines": [
				"parameters{",
				"     parameter_ID as string ('ID'),",
				"     parameter_SCD as string ('Club,Wage,Position')",
				"}",
				"source(output(",
				"          ID as string,",
				"          Name as string,",
				"          Age as string,",
				"          Nationality as string,",
				"          Club as string,",
				"          Wage as string,",
				"          PreferredFoot as string,",
				"          Position as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourcefifacsv",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> existingfifa",
				"sourcefifacsv derive(ID_Hash = md5(byName($parameter_ID)),",
				"          SCD_Hash = md5(byNames(split($parameter_SCD, ',')))) ~> callnewhashvalues",
				"existingfifa derive(ID_Hash = md5(byName($parameter_ID)),",
				"          SCD_Hash = md5(byNames(split($parameter_SCD, ',')))) ~> callexistinghashvalue",
				"callnewhashvalues, callexistinghashvalue exists(callnewhashvalues@ID_Hash == callexistinghashvalue@ID_Hash",
				"     && callnewhashvalues@SCD_Hash == callexistinghashvalue@SCD_Hash,",
				"     negate:true,",
				"     broadcast: 'auto')~> checknewdata",
				"checknewdata keyGenerate(output(Skey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> addsurrogatekey",
				"callexistinghashvalue aggregate(maxskey = max(toInteger(byName('Skey')))) ~> getmaxskey",
				"addsurrogatekey, getmaxskey join(maxskey==Skey||true(),",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinmaxskey",
				"joinmaxskey derive(Skey = Skey+iifNull(maxskey,0),",
				"          Active = 1,",
				"          ActiveStartTime = currentUTC(),",
				"          ActiveEndTime = toTimestamp(toString(null()))) ~> addskeyandothercolumns",
				"addskeyandothercolumns select(mapColumn(",
				"          each(match(name!='ID_Hash' && name!='SCD_Hash' && name!='MaxSkey'))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectreleventcolumns",
				"callexistinghashvalue, checknewdata exists(callexistinghashvalue@ID_Hash == callnewhashvalues@ID_Hash,",
				"     negate:false,",
				"     broadcast: 'auto')~> updateexistingdata",
				"updateexistingdata derive(Active = 0,",
				"          ActiveEndTime = currentUTC()) ~> amendactivestatus",
				"amendactivestatus select(mapColumn(",
				"          each(match(!in(['ID_Hash', 'SCD_Hash'], name)))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectrelevantcolumns",
				"selectreleventcolumns alterRow(insertIf(true())) ~> insertset",
				"selectrelevantcolumns alterRow(updateIf(true())) ~> updateset",
				"insertset, updateset union(byName: true)~> unioninsertupdate",
				"unioninsertupdate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:[($parameter_ID)],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinktosqldb"
			]
		}
	}
}