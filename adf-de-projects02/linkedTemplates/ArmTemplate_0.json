{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-de-projects02"
		},
		"ls_sqldb_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_sqldb'"
		},
		"ls_storagegen2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_storagegen2'"
		},
		"ls_storagegen2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://deprojectsstoragetst02.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ls_sqldb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_sqldb_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_storagegen2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_storagegen2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_storagegen2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/fifa_dl_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_storagegen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Fifa_1.csv",
						"fileSystem": "fifa"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Age",
						"type": "String"
					},
					{
						"name": "Nationality",
						"type": "String"
					},
					{
						"name": "Club",
						"type": "String"
					},
					{
						"name": "Wage",
						"type": "String"
					},
					{
						"name": "PreferredFoot",
						"type": "String"
					},
					{
						"name": "Position",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_storagegen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fifa_sqldb_tb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sqldb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "tbl_FIFAData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fifa_scd_append')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "append new records",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "fifa_dl_csv",
								"type": "DatasetReference"
							},
							"name": "sourcefifacsv"
						},
						{
							"dataset": {
								"referenceName": "fifa_sqldb_tb",
								"type": "DatasetReference"
							},
							"name": "existingfifa"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "fifa_sqldb_tb",
								"type": "DatasetReference"
							},
							"name": "sinktosqldb"
						}
					],
					"transformations": [
						{
							"name": "callnewhashvalues"
						},
						{
							"name": "callexistinghashvalue"
						},
						{
							"name": "checknewdata"
						},
						{
							"name": "addsurrogatekey",
							"description": "Adding new key Skey starting from 1 with step 1"
						},
						{
							"name": "getmaxskey"
						},
						{
							"name": "joinmaxskey"
						},
						{
							"name": "addskeyandothercolumns"
						},
						{
							"name": "selectreleventcolumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     parameter_ID as string ('ID'),",
						"     parameter_SCD as string ('Club,Wage,Position')",
						"}",
						"source(output(",
						"          ID as string,",
						"          Name as string,",
						"          Age as string,",
						"          Nationality as string,",
						"          Club as string,",
						"          Wage as string,",
						"          PreferredFoot as string,",
						"          Position as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourcefifacsv",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> existingfifa",
						"sourcefifacsv derive(ID_Hash = md5(byName($parameter_ID)),",
						"          SCD_Hash = md5(byNames(split($parameter_SCD, ',')))) ~> callnewhashvalues",
						"existingfifa derive(ID_Hash = md5(byName($parameter_ID)),",
						"          SCD_Hash = md5(byNames(split($parameter_SCD, ',')))) ~> callexistinghashvalue",
						"callnewhashvalues, callexistinghashvalue exists(callnewhashvalues@ID_Hash == callexistinghashvalue@ID_Hash",
						"     && callnewhashvalues@SCD_Hash == callexistinghashvalue@SCD_Hash,",
						"     negate:true,",
						"     broadcast: 'auto')~> checknewdata",
						"checknewdata keyGenerate(output(Skey as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> addsurrogatekey",
						"callexistinghashvalue aggregate(maxskey = max(toInteger(byName('Skey')))) ~> getmaxskey",
						"addsurrogatekey, getmaxskey join(maxskey==Skey||true(),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinmaxskey",
						"joinmaxskey derive(Skey = Skey+iifNull(maxskey,0),",
						"          Active = 1,",
						"          ActiveStartTime = currentUTC(),",
						"          ActiveEndTime = toTimestamp(toString(null()))) ~> addskeyandothercolumns",
						"addskeyandothercolumns select(mapColumn(",
						"          each(match(name!='ID_Hash'&&name!='SCD_Hash'&&name!='MaxSkey'))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectreleventcolumns",
						"selectreleventcolumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinktosqldb"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/fifa_dl_csv')]",
				"[concat(variables('factoryId'), '/datasets/fifa_sqldb_tb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fifa_scd_upsert')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "add new records and update existing records",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "fifa_dl_csv",
								"type": "DatasetReference"
							},
							"name": "sourcefifacsv"
						},
						{
							"dataset": {
								"referenceName": "fifa_sqldb_tb",
								"type": "DatasetReference"
							},
							"name": "existingfifa"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "fifa_sqldb_tb",
								"type": "DatasetReference"
							},
							"name": "sinktosqldb"
						}
					],
					"transformations": [
						{
							"name": "callnewhashvalues"
						},
						{
							"name": "callexistinghashvalue"
						},
						{
							"name": "checknewdata"
						},
						{
							"name": "addsurrogatekey",
							"description": "Adding new key Skey starting from 1 with step 1"
						},
						{
							"name": "getmaxskey"
						},
						{
							"name": "joinmaxskey"
						},
						{
							"name": "addskeyandothercolumns"
						},
						{
							"name": "selectreleventcolumns"
						},
						{
							"name": "updateexistingdata"
						},
						{
							"name": "amendactivestatus"
						},
						{
							"name": "selectrelevantcolumns"
						},
						{
							"name": "insertset"
						},
						{
							"name": "updateset"
						},
						{
							"name": "unioninsertupdate"
						}
					],
					"scriptLines": [
						"parameters{",
						"     parameter_ID as string ('ID'),",
						"     parameter_SCD as string ('Club,Wage,Position')",
						"}",
						"source(output(",
						"          ID as string,",
						"          Name as string,",
						"          Age as string,",
						"          Nationality as string,",
						"          Club as string,",
						"          Wage as string,",
						"          PreferredFoot as string,",
						"          Position as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourcefifacsv",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> existingfifa",
						"sourcefifacsv derive(ID_Hash = md5(byName($parameter_ID)),",
						"          SCD_Hash = md5(byNames(split($parameter_SCD, ',')))) ~> callnewhashvalues",
						"existingfifa derive(ID_Hash = md5(byName($parameter_ID)),",
						"          SCD_Hash = md5(byNames(split($parameter_SCD, ',')))) ~> callexistinghashvalue",
						"callnewhashvalues, callexistinghashvalue exists(callnewhashvalues@ID_Hash == callexistinghashvalue@ID_Hash",
						"     && callnewhashvalues@SCD_Hash == callexistinghashvalue@SCD_Hash,",
						"     negate:true,",
						"     broadcast: 'auto')~> checknewdata",
						"checknewdata keyGenerate(output(Skey as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> addsurrogatekey",
						"callexistinghashvalue aggregate(maxskey = max(toInteger(byName('Skey')))) ~> getmaxskey",
						"addsurrogatekey, getmaxskey join(maxskey==Skey||true(),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinmaxskey",
						"joinmaxskey derive(Skey = Skey+iifNull(maxskey,0),",
						"          Active = 1,",
						"          ActiveStartTime = currentUTC(),",
						"          ActiveEndTime = toTimestamp(toString(null()))) ~> addskeyandothercolumns",
						"addskeyandothercolumns select(mapColumn(",
						"          each(match(name!='ID_Hash'&&name!='SCD_Hash'&&name!='MaxSkey'))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectreleventcolumns",
						"callexistinghashvalue, checknewdata exists(callexistinghashvalue@ID_Hash == callnewhashvalues@ID_Hash,",
						"     negate:false,",
						"     broadcast: 'auto')~> updateexistingdata",
						"updateexistingdata derive(Active = 0,",
						"          ActiveEndTime = currentUTC()) ~> amendactivestatus",
						"amendactivestatus select(mapColumn(",
						"          each(match(!in(['ID_Hash','SCD_Hash'],name)))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectrelevantcolumns",
						"selectreleventcolumns alterRow(insertIf(true())) ~> insertset",
						"selectrelevantcolumns alterRow(updateIf(true())) ~> updateset",
						"insertset, updateset union(byName: true)~> unioninsertupdate",
						"unioninsertupdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:[($parameter_ID)],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinktosqldb"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/fifa_dl_csv')]",
				"[concat(variables('factoryId'), '/datasets/fifa_sqldb_tb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_fifa')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_fifa_upsert",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "fifa_scd_upsert",
								"type": "DataFlowReference",
								"parameters": {
									"parameter_ID": "'ID'",
									"parameter_SCD": "'Club,Wage,Position'"
								},
								"datasetParameters": {
									"sourcefifacsv": {},
									"existingfifa": {},
									"sinktosqldb": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/fifa_scd_upsert')]"
			]
		}
	]
}